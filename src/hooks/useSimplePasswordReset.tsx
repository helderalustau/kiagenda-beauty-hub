import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface PasswordResetResult {
  success: boolean;
  message: string;
  token?: string;
}

export const useSimplePasswordReset = () => {
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  // Gerar c√≥digo PIN de 6 d√≠gitos para telefone
  const generatePhoneCode = async (phone: string, userType: 'admin' | 'client'): Promise<PasswordResetResult> => {
    setLoading(true);
    
    try {
      console.log(`üîÑ Gerando c√≥digo PIN para ${userType}:`, phone);
      
      // Verificar se usu√°rio existe e obter dados completos
      const table = userType === 'admin' ? 'admin_auth' : 'client_auth';
      const { data: user, error: userError } = await supabase
        .from(table)
        .select('id, name, phone, email')
        .eq('phone', phone)
        .single();

      if (userError || !user) {
        console.log('‚ùå Usu√°rio n√£o encontrado:', userError);
        return {
          success: false,
          message: 'Telefone n√£o encontrado em nossos registros'
        };
      }

      // Valida√ß√£o adicional de seguran√ßa - verificar se o telefone realmente pertence ao usu√°rio
      if (user.phone !== phone) {
        console.log('‚ùå Telefone n√£o confere:', user.phone, 'vs', phone);
        return {
          success: false,
          message: 'Dados inconsistentes. Contate o suporte.'
        };
      }

      // Limpar tokens antigos deste usu√°rio
      await supabase
        .from('password_reset_tokens')
        .delete()
        .eq('user_id', user.id)
        .eq('token_type', 'phone');

      // Gerar c√≥digo de 6 d√≠gitos
      const code = Math.floor(100000 + Math.random() * 900000).toString();
      
      // Salvar token no banco com dados de valida√ß√£o
      const { error: tokenError } = await supabase
        .from('password_reset_tokens')
        .insert({
          user_type: userType,
          identifier: phone,
          token_type: 'phone',
          token_value: code,
          user_id: user.id,
          expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString() // 10 minutos
        });

      if (tokenError) {
        console.error('‚ùå Erro ao salvar token:', tokenError);
        return {
          success: false,
          message: 'Erro interno. Tente novamente.'
        };
      }

      console.log('‚úÖ C√≥digo PIN gerado para usu√°rio:', user.name, '- C√≥digo:', code);
      return {
        success: true,
        message: `C√≥digo de recupera√ß√£o gerado para ${user.name}`,
        token: code
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado:', error);
      return {
        success: false,
        message: 'Erro inesperado. Tente novamente.'
      };
    } finally {
      setLoading(false);
    }
  };

  // Verificar c√≥digo PIN com valida√ß√£o robusta
  const verifyPhoneCode = async (phone: string, code: string, userType: 'admin' | 'client'): Promise<PasswordResetResult> => {
    setLoading(true);
    
    try {
      console.log(`üîÑ Verificando c√≥digo PIN para ${userType}:`, phone);
      
      // Buscar token v√°lido com dados do usu√°rio
      const { data: token, error: tokenError } = await supabase
        .from('password_reset_tokens')
        .select('*')
        .eq('identifier', phone)
        .eq('token_value', code)
        .eq('user_type', userType)
        .eq('token_type', 'phone')
        .eq('is_used', false)
        .gt('expires_at', new Date().toISOString())
        .single();

      if (tokenError || !token) {
        console.log('‚ùå Token n√£o encontrado ou inv√°lido:', tokenError);
        return {
          success: false,
          message: 'C√≥digo inv√°lido, expirado ou j√° utilizado'
        };
      }

      // Valida√ß√£o adicional: verificar se o usu√°rio ainda existe e os dados conferem
      const table = userType === 'admin' ? 'admin_auth' : 'client_auth';
      const { data: user, error: userError } = await supabase
        .from(table)
        .select('id, name, phone, email')
        .eq('id', token.user_id)
        .single();

      if (userError || !user || user.phone !== phone) {
        console.log('‚ùå Valida√ß√£o de usu√°rio falhou:', userError);
        // Invalidar token por seguran√ßa
        await supabase
          .from('password_reset_tokens')
          .update({ is_used: true })
          .eq('id', token.id);
        
        return {
          success: false,
          message: 'Dados inconsistentes. Solicite um novo c√≥digo.'
        };
      }

      console.log('‚úÖ C√≥digo verificado com sucesso para usu√°rio:', user.name);
      return {
        success: true,
        message: 'C√≥digo verificado! Agora defina sua nova senha.',
        token: token.id
      };

    } catch (error) {
      console.error('‚ùå Erro ao verificar c√≥digo:', error);
      return {
        success: false,
        message: 'Erro inesperado. Tente novamente.'
      };
    } finally {
      setLoading(false);
    }
  };

  // Enviar reset por email com valida√ß√£o robusta
  const sendEmailReset = async (email: string, userType: 'admin' | 'client'): Promise<PasswordResetResult> => {
    setLoading(true);
    
    try {
      console.log(`üîÑ Enviando reset por email para ${userType}:`, email);
      
      // Verificar se usu√°rio existe e obter dados completos
      const table = userType === 'admin' ? 'admin_auth' : 'client_auth';
      const { data: user, error: userError } = await supabase
        .from(table)
        .select('id, name, email, phone')
        .eq('email', email)
        .single();

      if (userError || !user) {
        console.log('‚ùå Usu√°rio n√£o encontrado:', userError);
        return {
          success: false,
          message: 'Email n√£o encontrado em nossos registros'
        };
      }

      // Valida√ß√£o adicional de seguran√ßa - verificar se o email realmente pertence ao usu√°rio
      if (user.email !== email) {
        console.log('‚ùå Email n√£o confere:', user.email, 'vs', email);
        return {
          success: false,
          message: 'Dados inconsistentes. Contate o suporte.'
        };
      }

      // Limpar tokens antigos deste usu√°rio
      await supabase
        .from('password_reset_tokens')
        .delete()
        .eq('user_id', user.id)
        .eq('token_type', 'email');

      // Usar reset nativo do Supabase
      const redirectTo = `${window.location.origin}/${userType}-reset-password`;
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo
      });

      if (error) {
        console.error('‚ùå Erro ao enviar email:', error);
        return {
          success: false,
          message: 'Erro ao enviar email. Verifique se o endere√ßo est√° correto.'
        };
      }

      // Registrar o envio do email para auditoria
      await supabase
        .from('password_reset_tokens')
        .insert({
          user_type: userType,
          identifier: email,
          token_type: 'email',
          token_value: 'email_sent',
          user_id: user.id,
          expires_at: new Date(Date.now() + 60 * 60 * 1000).toISOString() // 1 hora
        });

      console.log('‚úÖ Email de reset enviado para usu√°rio:', user.name);
      return {
        success: true,
        message: `Email de recupera√ß√£o enviado para ${user.name}! Verifique sua caixa de entrada.`
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado:', error);
      return {
        success: false,
        message: 'Erro inesperado. Tente novamente.'
      };
    } finally {
      setLoading(false);
    }
  };

  // Redefinir senha com token verificado e valida√ß√£o robusta
  const resetPasswordWithToken = async (tokenId: string, newPassword: string, userType: 'admin' | 'client'): Promise<PasswordResetResult> => {
    setLoading(true);
    
    try {
      console.log(`üîÑ Redefinindo senha com token para ${userType}`);
      
      // Buscar token v√°lido
      const { data: token, error: tokenError } = await supabase
        .from('password_reset_tokens')
        .select('*')
        .eq('id', tokenId)
        .eq('user_type', userType)
        .eq('is_used', false)
        .gt('expires_at', new Date().toISOString())
        .single();

      if (tokenError || !token) {
        console.log('‚ùå Token n√£o encontrado ou expirado:', tokenError);
        return {
          success: false,
          message: 'Token inv√°lido ou expirado. Solicite um novo c√≥digo.'
        };
      }

      // Valida√ß√£o adicional: verificar se o usu√°rio ainda existe
      const table = userType === 'admin' ? 'admin_auth' : 'client_auth';
      const { data: user, error: userError } = await supabase
        .from(table)
        .select('id, name, phone, email')
        .eq('id', token.user_id)
        .single();

      if (userError || !user) {
        console.log('‚ùå Usu√°rio n√£o encontrado:', userError);
        // Invalidar token por seguran√ßa
        await supabase
          .from('password_reset_tokens')
          .update({ is_used: true })
          .eq('id', tokenId);
        
        return {
          success: false,
          message: 'Usu√°rio n√£o encontrado. Contate o suporte.'
        };
      }

      // Valida√ß√£o de for√ßa da senha
      if (newPassword.length < 6) {
        return {
          success: false,
          message: 'A senha deve ter pelo menos 6 caracteres'
        };
      }

      // Atualizar senha no banco
      const { error: updateError } = await supabase
        .from(table)
        .update({ 
          password: newPassword,
          updated_at: new Date().toISOString()
        })
        .eq('id', token.user_id);

      if (updateError) {
        console.error('‚ùå Erro ao atualizar senha:', updateError);
        return {
          success: false,
          message: 'Erro ao atualizar senha. Tente novamente.'
        };
      }

      // Marcar token como usado e invalidar todos os outros tokens deste usu√°rio
      await supabase
        .from('password_reset_tokens')
        .update({ is_used: true })
        .eq('user_id', token.user_id);

      console.log('‚úÖ Senha atualizada com sucesso para usu√°rio:', user.name);
      return {
        success: true,
        message: `Senha atualizada com sucesso para ${user.name}!`
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado:', error);
      return {
        success: false,
        message: 'Erro inesperado. Tente novamente.'
      };
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    generatePhoneCode,
    verifyPhoneCode,
    sendEmailReset,
    resetPasswordWithToken
  };
};